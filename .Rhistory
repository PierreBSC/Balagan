which(colnames(Merged_pi_table  )=="Actin bActin beta-Actin")
image_temp = readTIFF(List_files_tiff[3],as.is = T,all = T)
image_temp = image_temp[[30]]
image_temp = as.cimg(sqrt(3/8+image_temp))
streched_value= quantile(image_temp,0.99)
image_temp[image_temp>streched_value] =streched_value
image_temp = as.cimg((image_temp))
Cell_location_temp = data.frame(Cell_meta_data$Y_location,Cell_meta_data$X_location)[Cell_meta_data$Sample==3,]
plot((image_temp))
points(Cell_location_temp,pch=21,bg=string.to.colors(Cell_state$cluster[Cell_meta_data$Sample==3]))
plot(Merged_lambda_0_table,Merged_delta_table,log="xy")
plot(Merged_lambda_0_table[,30],Merged_delta_table$`Actin bActin beta-Actin`,log="xy")
which(colnames(Merged_pi_table  )=="MX1")
plot(Merged_lambda_0_table[,28],Merged_delta_table[,28],log="xy")
library(fitdistrplus)
for (k in 1:ncol(Merged_delta_table)) {
plot(Merged_lambda_0_table[,k],Merged_delta_table[,k],log="xy",main=colnames(Merged_delta_table)[k])
}
for (k in 1:ncol(Merged_delta_table)) {
plot(log(1+Merged_lambda_0_table[,k]),log(1+Merged_delta_table[,k]),main=colnames(Merged_delta_table)[k])
}
library(rgl)
install("rgl")
install.packages("plot3D")
scatter3D(log(1+Merged_lambda_0_table[,k]),log(1+Merged_delta_table[,k]),logit_transform(Merged_pi_table[,k]) )
library(scatter3D)
install("scatter3D")
library("plot3D")
scatter3D(log(1+Merged_lambda_0_table[,k]),log(1+Merged_delta_table[,k]),logit_transform(Merged_pi_table[,k]) )
scatter3D(x=log(1+Merged_lambda_0_table[,k]),z=log(1+Merged_delta_table[,k]),y=logit_transform(Merged_pi_table[,k]) )
k
k="MX1"
scatter3D(x=log(1+Merged_lambda_0_table[,k]),z=log(1+Merged_delta_table[,k]),y=logit_transform(Merged_pi_table[,k]) )
k
k=28
scatter3D(x=log(1+Merged_lambda_0_table[,k]),z=log(1+Merged_delta_table[,k]),y=logit_transform(Merged_pi_table[,k]) )
help(scatter3D)
library(scatterplot3d)
for (k in 1:ncol(Positive_signal_merged)) {
Scatter_biplot(k)
}
hist(log10(Merged_delta_table$`CXCL8 / IL-8`))
hist(log10(Merged_delta_table$`CXCL8 / IL-8`),100)
hist(logit_transform(Merged_pi_table$`CXCL8 / IL-8`),100)
hist(log10(Merged_delta_table$`CXCL8 / IL-8`),100)
hist(log10(Positive_signal_merged$`CXCL8 / IL-8`),100)
hist((Positive_signal_merged$`CXCL8 / IL-8`),100)
hist(sqrt(Positive_signal_merged$`CXCL8 / IL-8`),100)
Cell_state = kmeans(cbind(log(1+Merged_delta_table$`CXCL8 / IL-8`),logit_transform(Merged_pi_table$`CXCL8 / IL-8`)),
centers = 2,nstart = 1000,iter.max = 1000,algorithm = "L")
plot(Merged_delta_table$`CXCL8 / IL-8`,logit_transform(Merged_pi_table$`CXCL8 / IL-8`),log="x",
cex=0.8,pch=21,bg=color_convertion(sqrt(1+Positive_signal_merged$`MX1`)))
plot(Merged_delta_table$`CXCL8 / IL-8`,logit_transform(Merged_pi_table$`CXCL8 / IL-8`),log="x",cex.lab=1.3,
cex=0.8,pch=21,bg=string.to.colors(Cell_state$cluster),xlab="Delta value",ylab="Pi value (logit transform)")
hist((Merged_lambda_0_table$`CXCL8 / IL-8`),100)
hist((Merged_lambda_0_table[,`CXCL8 / IL-8`]),100)
hist((Merged_lambda_0_table[,"CXCL8 / IL-8"]),100)
which(colnames(Merged_pi_table  )=="CXCL8 / IL-8")
hist((Merged_lambda_0_table[,3]),100)
hist(log(1+Merged_lambda_0_table[,3]),100)
which(colnames(Merged_pi_table  )=="CXCL8 / IL-8")
image_temp = readTIFF(List_files_tiff[3],as.is = T,all = T)
image_temp = image_temp[[30]]
image_temp = as.cimg(sqrt(3/8+image_temp))
streched_value= quantile(image_temp,0.99)
image_temp = image_temp[[31]]
image_temp = as.cimg(sqrt(3/8+image_temp))
streched_value= quantile(image_temp,0.99)
image_temp[image_temp>streched_value] =streched_value
image_temp = as.cimg((image_temp))
library(imager)
which(colnames(Merged_pi_table  )=="CXCL8 / IL-8")
image_temp = readTIFF(List_files_tiff[3],as.is = T,all = T)
image_temp = image_temp[[31]]
streched_value= quantile(image_temp,0.99)
image_temp[image_temp>streched_value] =streched_value
image_temp = as.cimg((image_temp))
Cell_location_temp = data.frame(Cell_meta_data$Y_location,Cell_meta_data$X_location)[Cell_meta_data$Sample==3,]
plot((image_temp))
which(colnames(Merged_pi_table  )=="CXCL8 / IL-8")
image_temp = readTIFF(List_files_tiff[3],as.is = T,all = T)
image_temp = image_temp[[31]]
#image_temp = as.cimg(sqrt(3/8+image_temp))
streched_value= quantile(image_temp,0.999)
image_temp[image_temp>streched_value] =streched_value
image_temp = as.cimg((image_temp))
Cell_location_temp = data.frame(Cell_meta_data$Y_location,Cell_meta_data$X_location)[Cell_meta_data$Sample==3,]
plot((image_temp))
points(Cell_location_temp,pch=21,bg=string.to.colors(Cell_state$cluster[Cell_meta_data$Sample==3]))
which(colnames(Merged_pi_table  )=="NS1")
image_temp = readTIFF(List_files_tiff[3],as.is = T,all = T)
image_temp = image_temp[[17]]
#image_temp = as.cimg(sqrt(3/8+image_temp))
streched_value= quantile(image_temp,0.999)
image_temp[image_temp>streched_value] =streched_value
image_temp = as.cimg((image_temp))
Cell_location_temp = data.frame(Cell_meta_data$Y_location,Cell_meta_data$X_location)[Cell_meta_data$Sample==3,]
plot((image_temp))
which(colnames(Merged_pi_table  )=="NS1")
image_temp = readTIFF(List_files_tiff[3],as.is = T,all = T)
image_temp = image_temp[[17]]
image_temp = as.cimg(sqrt(3/8+image_temp))
image_temp = as.cimg((image_temp))
Cell_location_temp = data.frame(Cell_meta_data$Y_location,Cell_meta_data$X_location)[Cell_meta_data$Sample==3,]
plot((image_temp))
streched_value= quantile(image_temp,0.999)
image_temp[image_temp>streched_value] =streched_value
image_temp = as.cimg((image_temp))
Cell_location_temp = data.frame(Cell_meta_data$Y_location,Cell_meta_data$X_location)[Cell_meta_data$Sample==3,]
plot((image_temp))
which(colnames(Merged_pi_table  )=="NS1")
image_temp = readTIFF(List_files_tiff[3],as.is = T,all = T)
image_temp = image_temp[[17]]
image_temp = as.cimg((image_temp))
Cell_location_temp = data.frame(Cell_meta_data$Y_location,Cell_meta_data$X_location)[Cell_meta_data$Sample==3,]
plot((image_temp))
image_temp = as.cimg(sqrt(3/8+image_temp))
plot((image_temp))
pheatmap(cor(log(1+Merged_delta_table)),clustering_method = "ward")
pheatmap(cor(Merged_pi_table),clustering_method = "ward")
plot(Merged_delta_table$NS1,logit_transform(Merged_pi_table$NS1),log="x",
cex=0.8,pch=21,bg=color_convertion(sqrt(1+Positive_signal_merged$`MX1`)))
Cell_state = kmeans(cbind(log(1+Merged_delta_table$NS1),logit_transform(Merged_pi_table$NS1)),
centers = 3,nstart = 1000,iter.max = 1000,algorithm = "L")
plot(Merged_delta_table$NS1,logit_transform(Merged_pi_table$NS1),log="x",
cex=0.8,pch=21,bg=string.to.colors(Cell_state$cluster),xlab="Delta value",ylab="Pi value (logit transform)")
plot((image_temp))
points(Cell_location_temp,pch=21,bg=string.to.colors(Cell_state$cluster[Cell_meta_data$Sample==3]))
image_temp = readTIFF(List_files_tiff[3],as.is = T,all = T)
image_temp = image_temp[[17]]
image_temp = as.cimg((image_temp))
Cell_location_temp = data.frame(Cell_meta_data$Y_location,Cell_meta_data$X_location)[Cell_meta_data$Sample==3,]
plot((image_temp))
points(Cell_location_temp,pch=21,bg=string.to.colors(Cell_state$cluster[Cell_meta_data$Sample==3]))
plot(Merged_delta_table$NS1,logit_transform(Merged_pi_table$NS1),log="x",
cex=0.8,pch=21,bg=string.to.colors(Cell_state$cluster),xlab="Delta value",ylab="Pi value (logit transform)")
boxplot(Merged_lambda_0_table)
boxplot(Merged_lambda_0_table,outline=F)
boxplot(Merged_lambda_0_table,outline=F,main="Distribution of lambda value across channels")
colnames(Merged_delta_table)[1]
colnames(Merged_delta_table)[6]
colnames(Merged_delta_table)[10]
colnames(Merged_delta_table)[28]
colnames(Merged_delta_table)[30]
plot(Merged_delta_table$NS1,logit_transform(Merged_pi_table$NS1),log="x",
cex=0.8,pch=21,bg=string.to.colors(Cell_state$cluster),xlab="Delta value",ylab="Pi value (logit transform)")
plot(Merged_delta_table$NS1+Merged_lambda_0_table[,"NS1"],logit_transform(Merged_pi_table$NS1),log="x",
cex=0.8,pch=21,bg=string.to.colors(Cell_state$cluster),xlab="Delta value",ylab="Pi value (logit transform)")
colnames(Merged_lambda_0_table) = Panel_marker$Target
Merged_lambda_0_table = as.data.frame(Merged_lambda_0_table)
plot(Merged_delta_table$NS1+Merged_lambda_0_table$NS1,logit_transform(Merged_pi_table$NS1),log="x",
cex=0.8,pch=21,bg=string.to.colors(Cell_state$cluster),xlab="Delta value",ylab="Pi value (logit transform)")
plot(Merged_delta_table$MX1+Merged_lambda_0_table$MX1,logit_transform(Merged_pi_table$MX1),log="x",
cex=0.8,pch=21,bg=string.to.colors(Cell_state$cluster),xlab="Delta value",ylab="Pi value (logit transform)")
plot(Merged_delta_table$MX1,logit_transform(Merged_pi_table$MX1),log="x",
cex=0.8,pch=21,bg=string.to.colors(Cell_state$cluster),xlab="Delta value",ylab="Pi value (logit transform)")
plot(Merged_delta_table$NS1+Merged_lambda_0_table$NS1,logit_transform(Merged_pi_table$NS1),log="x",
cex=0.8,pch=21,bg=string.to.colors(Cell_state$cluster),xlab="Delta value",ylab="Pi value (logit transform)")
plot(Merged_delta_table$HSP70+Merged_lambda_0_table$HSP70,logit_transform(Merged_pi_table$HSP70),log="x",
cex=0.8,pch=21,bg=string.to.colors(Cell_state$cluster),xlab="Delta value",ylab="Pi value (logit transform)")
plot(Merged_delta_table$HSP70,logit_transform(Merged_pi_table$HSP70),log="x",
cex=0.8,pch=21,bg=string.to.colors(Cell_state$cluster),xlab="Delta value",ylab="Pi value (logit transform)")
hist(Merged_pi_table$HSP70)
hist(Merged_pi_table$HSP70,100)
colnames(Merged_delta_table)[10]
colnames(Merged_delta_table)[28]
colnames(Merged_delta_table)[30]
library(tiff)
setwed("Desktop/Virus_project/IMC_Data/20230210_PB_PFA_fixation")
setwd("Desktop/Virus_project/IMC_Data/20230210_PB_PFA_fixation")
list_files = list.files("analysis/tiffs/")
list_files = list.files("analysis/tiffs/",pattern = "full")
list_files
list_files = list.files("analysis/tiffs/",pattern = "full.tiff")
list_files
k = 1
list_files
tiff_file = readTIFF(list_files[k])
list_files = list.files("analysis/tiffs/",pattern = "full.tiff",full.names = T)
tiff_file = readTIFF(list_files[k])
tiff_file
tiff_file = readTIFF(list_files[k],as.is = TRUE,all = TRUE)
tiff_file
Panel_file = read.delim("Final_RNAscope_panel_RSV_v2.csv",sep=",")
Panel_file
tiff_file_RSV_Abcam_conjugated = tiff_file[[5]]
tiff_file_RSV_Maxpar_conjugated = tiff_file[[4]]
plot(as.numeric(tiff_file_RSV_Maxpar_conjugated),as.numeric(tiff_file_RSV_Abcam_conjugated))
cor(as.numeric(tiff_file_RSV_Maxpar_conjugated),as.numeric(tiff_file_RSV_Abcam_conjugated))
dim(tiff_file_RSV_Maxpar_conjugated)
plot(as.numeric(tiff_file_RSV_Maxpar_conjugated),as.numeric(tiff_file_RSV_Abcam_conjugated),log="xy")
plot(sqrt(as.numeric(tiff_file_RSV_Maxpar_conjugated)),sqrt(as.numeric(tiff_file_RSV_Abcam_conjugated)))
boxplot(as.numeric(tiff_file_RSV_Maxpar_conjugated),as.numeric(tiff_file_RSV_Abcam_conjugated)),outline=F)
boxplot(as.numeric(tiff_file_RSV_Maxpar_conjugated),as.numeric(tiff_file_RSV_Abcam_conjugated),outline=F)
Meta_data =read.delim("Meta_data.txt")
Meta_data
Meta_data =read.delim("Meta_data.txt",row.names = 1)
Meta_data
List_file =list.files("Cell_segmentation/",full.names = T)
List_file
u = read.delim(List_file[k])
u
u = read.delim(List_file[k],sep=",")
u
u = read.delim(List_file[k],sep=",",header = FALSE)
head(u)
Cell_data_temp = data.frame(Cell_location_X =u$V2,Cell_location_Y =u$V3)
Cell_data_temp$Sample = k
Cell_data_temp
Merged_expression_data = c()
Merged_cell_data = c()
for (k in 1:length(List_file)) {
u = read.delim(List_file[k],sep=",",header = FALSE)
Cell_data_temp = data.frame(Cell_location_X =u$V2,Cell_location_Y =u$V3)
Cell_data_temp$Sample = k
Merged_cell_data = rbind(Merged_cell_data,Cell_data_temp)
Merged_expression_data = rbind(Merged_expression_data,u[,-c(1,2,3)])
}
dim(Merged_expression_data)
Panel_antibody = read.delim("Final_RNAscope_panel_RSV_v2.csv",row.names = 1,sep="m")
Panel_antibody = read.delim("Final_RNAscope_panel_RSV_v2.csv",row.names = 1,sep=",")
Panel_antibody = read.delim("Final_RNAscope_panel_RSV_v2.csv",sep=",")
Panel_antibody$Target
colnames(Merged_expression_data) = Panel_antibody$Target
Merged_expression_data = as.data.frame(Merged_expression_data)
boxplot(Merged_expression_data$RSV~Merged_cell_data$Sample)
List_file
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis)
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log='xy')
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis)
plot(sqrt(3/8+Merged_expression_data$RSV),sqrt(3/8+Merged_expression_data$RSV_bis))
plot(Merged_expression_data$RSV),+Merged_expression_data$RSV_bis)
plot(Merged_expression_data$RSV),Merged_expression_data$RSV_bis)
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis)
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy")
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20))
abline(0,1)
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i')
par(las=1,bty='l')
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i')
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg='red3')
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg='red3',xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody")
abline(0,1,lwd=2,lty=2,col="grey")
m = lm(log10(Merged_expression_data$RSV_bis)~log10(Merged_expression_data$RSV),subset = Merged_expression_data$RSV>0 & Merged_expression_data$RSV_bis>0)
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg='red3',xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody")
m = lm(log10(Merged_expression_data$RSV_bis)~log10(Merged_expression_data$RSV),subset = Merged_expression_data$RSV>0 & Merged_expression_data$RSV_bis>0)
abline(coef(m),lwd=2,lty=2,col="grey")
library(fifer)
Merged_cell_data$Sample
x = list.files("Cell_segmentation/",full.names = F)
x
x = strsplit(x,split = ".")
x
x = list.files("Cell_segmentation/",full.names = F)
x = strsplit(x,split = ".",fixed = T)
x
x = unlist(lapply(x,FUN = function(x) {x[1]}))
x
#Loading panel and metadata
setwd("Desktop/Virus_project/IMC_Data/20230210_PB_PFA_fixation")
List_file =list.files("Cell_segmentation/",full.names = T)
x = list.files("Cell_segmentation/",full.names = F)
x = strsplit(x,split = ".",fixed = T)
x = unlist(lapply(x,FUN = function(x) {x[1]}))
names(List_file) = x
Merged_expression_data = c()
Merged_cell_data = c()
for (k in 1:length(List_file)) {
u = read.delim(List_file[as.character(k)],sep=",",header = FALSE)
Cell_data_temp = data.frame(Cell_location_X =u$V2,Cell_location_Y =u$V3)
Cell_data_temp$Sample = k
Merged_cell_data = rbind(Merged_cell_data,Cell_data_temp)
Merged_expression_data = rbind(Merged_expression_data,u[,-c(1,2,3)])
}
colnames(Merged_expression_data) = Panel_antibody$Target
Merged_expression_data = as.data.frame(Merged_expression_data)
boxplot(Merged_expression_data$RSV~Merged_cell_data$Sample)
boxplot(Merged_expression_data$RSV_bis~Merged_cell_data$Sample)
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Fixating.agent),xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody")
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Infection),xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody")
Meta_data
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Infection[Merged_cell_data$Sample]),xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody")
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Fixating.agent[Merged_cell_data$Sample]),xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody")
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Infection[Merged_cell_data$Sample],colors = c("grey","red3")),
xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody")
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Infection[Merged_cell_data$Sample],colors = c("red3","grey")),
xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody")
legend("topleft",legend = c("Infected",'Control'),fill = c("red3","grey"),bty = "n")
legend("topleft",legend = c("Infected",'Control'),fill = c("red3","grey"),bty = "n",cex=1.5)
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Infection[Merged_cell_data$Sample],colors = c("red3","grey")),
xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody")
legend("topleft",legend = c("Infected",'Control'),fill = c("red3","grey"),bty = "n",cex=1.5)
Meta_data$Infection
m = lm(log10(Merged_expression_data$RSV_bis)~log10(Merged_expression_data$RSV),
subset = Merged_expression_data$RSV>0 & Merged_expression_data$RSV_bis>0 & Meta_data$Infection[Merged_cell_data$Sample]=="RSV 24h MOI=1")
abline(coef(m),lwd=2,lty=2,col="grey")
abline(coef(m),lwd=2,lty=2,col="black")
summary(m)
Condition_infection = Meta_data$Infection[Merged_cell_data$Sample]
Condition_fixation = Meta_data$Fixating.agent[Merged_cell_data$Sample]
boxplot(Merged_expression_data$RSV_bis~paste(Condition_infection,Condition_fixation))
boxplot(Merged_expression_data$RSV_bis~paste(Condition_infection,Condition_fixation),outline=F)
boxplot(Merged_expression_data$RSV~paste(Condition_infection,Condition_fixation),outline=F)
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Infection[Merged_cell_data$Sample],colors = c("red3","grey")),
xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody")
legend("topleft",legend = c("Infected",'Control'),fill = c("red3","grey"),bty = "n",cex=1.5)
m = lm(log10(Merged_expression_data$RSV_bis)~log10(Merged_expression_data$RSV),
subset = Merged_expression_data$RSV>0 & Merged_expression_data$RSV_bis>0 & Meta_data$Infection[Merged_cell_data$Sample]=="RSV 24h MOI=1")
m_sum = summary(m)
R_2 = m_sum$r.squared
R_2
R_2 = round(m_sum$r.squared,3)
R_2
R_2 = round(m_sum$r.squared,2)
R_2
legend("left",legend = paste("R2=",R_2),bty = "n")
par(las=1,bty='l')
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Infection[Merged_cell_data$Sample],colors = c("red3","grey")),
xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody")
legend("topleft",legend = c("Infected",'Control'),fill = c("red3","grey"),bty = "n",cex=1.5)
m = lm(log10(Merged_expression_data$RSV_bis)~log10(Merged_expression_data$RSV),
subset = Merged_expression_data$RSV>0 & Merged_expression_data$RSV_bis>0 & Meta_data$Infection[Merged_cell_data$Sample]=="RSV 24h MOI=1")
abline(coef(m),lwd=2,lty=2,col="black")
m_sum = summary(m)
R_2 = round(m_sum$r.squared,2)
legend("left",legend = paste("R2=",R_2),bty = "n",cex=1.3)
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Infection[Merged_cell_data$Sample],colors = c("red3","grey")),
xlab="Maxpar conjugated antibody",ylab="Abcam conjugated antibody",cex.lab=1.3)
legend("topleft",legend = c("Infected",'Control'),fill = c("red3","grey"),bty = "n",cex=1.5)
m = lm(log10(Merged_expression_data$RSV_bis)~log10(Merged_expression_data$RSV),
subset = Merged_expression_data$RSV>0 & Merged_expression_data$RSV_bis>0 & Meta_data$Infection[Merged_cell_data$Sample]=="RSV 24h MOI=1")
abline(coef(m),lwd=2,lty=2,col="black")
m_sum = summary(m)
R_2 = round(m_sum$r.squared,2)
legend("left",legend = paste("R2=",R_2),bty = "n",cex=1.3)
par(las=1,bty='l')
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Infection[Merged_cell_data$Sample],colors = c("red3","grey")),
xlab="Maxpar conjugated antibody signal",ylab="Abcam conjugated antibody signal",cex.lab=1.3)
legend("topleft",legend = c("Infected",'Control'),fill = c("red3","grey"),bty = "n",cex=1.5)
m = lm(log10(Merged_expression_data$RSV_bis)~log10(Merged_expression_data$RSV),
subset = Merged_expression_data$RSV>0 & Merged_expression_data$RSV_bis>0 & Meta_data$Infection[Merged_cell_data$Sample]=="RSV 24h MOI=1")
abline(coef(m),lwd=2,lty=2,col="black")
m_sum = summary(m)
R_2 = round(m_sum$r.squared,2)
legend("left",legend = paste("R2=",R_2),bty = "n",cex=1.3)
Condition_infection
boxplot(Merged_expression_data$RSV~Condition_fixation,outline=F,subset = Condition_infection=="RSV 24h MOI=1")
10^0.13
log2(10^0.13)
par(las=1,bty='l')
plot(Merged_expression_data$RSV,Merged_expression_data$RSV_bis,log="xy",xlim=c(0.1,20),ylim=c(0.1,20),xaxs='i',yaxs='i',
pch=21,bg=string.to.colors(Meta_data$Infection[Merged_cell_data$Sample],colors = c("red3","grey")),
xlab="Maxpar conjugated antibody signal",ylab="Abcam conjugated antibody signal",cex.lab=1.3)
legend("topleft",legend = c("Infected",'Control'),fill = c("red3","grey"),bty = "n",cex=1.5)
m = lm(log10(Merged_expression_data$RSV_bis)~log10(Merged_expression_data$RSV),
subset = Merged_expression_data$RSV>0 & Merged_expression_data$RSV_bis>0 & Meta_data$Infection[Merged_cell_data$Sample]=="RSV 24h MOI=1")
abline(coef(m),lwd=2,lty=2,col="black")
m_sum = summary(m)
R_2 = round(m_sum$r.squared,2)
legend("left",legend = paste("R2=",R_2),bty = "n",cex=1.3)
options(
usethis.description = list(
`Authors@R` = 'person("Pierre", "Bost", email = "pierre.bost@uzh.ch",
role = c("aut", "cre"),
comment = c(ORCID = "0000-0003-1498-9385"))',
License = "MIT + file LICENSE",
Language =  "en"
)
)
library(usethis)
use_description(fields = list(), check_name = TRUE, roxygen = TRUE)
setwd("~")
setwd("Documents/GitHub/Balagan/")
use_description(fields = list(), check_name = TRUE, roxygen = TRUE)
usethis::use_package('MASS', 'Matrix', 'N2R', 'RColorBrewer', 'S4Vectors',
'SingleCellExperiment', 'aod', 'dbscan', 'doParallel',
'fitdistrplus', 'foreach', 'geometry', 'igraph', 'imager',
'pheatmap', 'rTensor', 'readr', 'spatgraphs', 'spatstat', 'statmod',
'uwot', 'zipfR')
usethis::use_package(c('MASS', 'Matrix', 'N2R', 'RColorBrewer', 'S4Vectors',
'SingleCellExperiment', 'aod', 'dbscan', 'doParallel',
'fitdistrplus', 'foreach', 'geometry', 'igraph', 'imager',
'pheatmap', 'rTensor', 'readr', 'spatgraphs', 'spatstat', 'statmod',
'uwot', 'zipfR'))
use_package(package = "MASS")
use_package(package = "Matrix")
use_package(package = "N2R")
use_package(package = "RColorBrewer")
use_package(package = "S4Vectors")
use_package(package = "SingleCellExperiment")
use_package(package = "aod")
use_package(package = "dbscan")
use_package(package = "doParallel")
use_package(package = "fitdistrplus")
use_package(package = "foreach")
use_package(package = "geometry")
use_package(package = "igraph")
use_package(package = "imager")
use_package(package = "pheatmap")
use_package(package = "rTensor")
use_package(package = "readr")
use_package(package = "spatgraphs")
use_package(package = "spatstat")
use_package(package = "statmod")
use_package(package = "uwot")
use_package(packagezipfRuwot")
use_package(package = "zipfR")
use_description(fields = list(), check_name = TRUE, roxygen = TRUE)
roxygen2::roxygenise()
use_description(fields = list(), check_name = TRUE, roxygen = TRUE)
options(
usethis.description = list(
`Authors@R` = 'person("Pierre", "Bost", email = "pierre.bost@uzh.ch",
role = c("aut", "cre"),
comment = c(ORCID = "0000-0003-1498-9385"))',
License = "MIT + file LICENSE",
Language =  "en",
URL = "https://github.com/PierreBSC/Balagan"
)
)
use_package(c('MASS', 'Matrix', 'N2R', 'RColorBrewer', 'S4Vectors',
'SingleCellExperiment', 'aod', 'dbscan', 'doParallel',
'fitdistrplus', 'foreach', 'geometry', 'igraph', 'imager',
'pheatmap', 'rTensor', 'readr', 'spatgraphs', 'spatstat', 'statmod',
'uwot', 'zipfR'))
use_description(fields = list(), check_name = TRUE, roxygen = TRUE)
use_package(package = "MASS")
use_package(package = "MASS")
use_package(package = "Matrix")
use_package(package = "N2R")
use_package(package = "RColorBrewer")
use_package(package = "S4Vectors")
use_package(package = "SingleCellExperiment")
use_package(package = "aod")
use_package(package = "dbscan")
use_package(package = "doParallel")
use_package(package = "fitdistrplus")
use_package(package = "foreach")
use_package(package = "geometry")
use_package(package = "igraph")
use_package(package = "imager")
use_package(package = "pheatmap")
use_package(package = "rTensor")
use_package(package = "readr")
use_package(package = "spatgraphs")
use_package(package = "spatstat")
use_package(package = "statmod")
use_package(package = "uwot")
use_package(package = "zipfR")
use_description(fields = list(URL = "https://github.com/PierreBSC/Balagan"), check_name = TRUE, roxygen = TRUE)
use_description(fields = list(URL = "https://github.com/PierreBSC/Balagan",Version=1.00), check_name = TRUE, roxygen = TRUE)
use_description(fields = list(URL = "https://github.com/PierreBSC/Balagan",Version="1.00"), check_name = TRUE, roxygen = TRUE)
use_description(fields = list(URL = "https://github.com/PierreBSC/Balagan",Version="1.0.1",), check_name = TRUE, roxygen = TRUE)
use_description(fields = list(URL = "https://github.com/PierreBSC/Balagan",Version="1.0.1"), check_name = TRUE, roxygen = TRUE)
use_description(fields = list(URL = "https://github.com/PierreBSC/Balagan",Version="0.1"), check_name = TRUE, roxygen = TRUE)
use_description(fields = list(URL = "https://github.com/PierreBSC/Balagan",Version="0.1"), check_name = TRUE, roxygen = TRUE)
use_description(fields = list(URL = "https://github.com/PierreBSC/Balagan",Version="1.0.0"), check_name = TRUE, roxygen = TRUE)
use_description(fields = list(URL = "https://github.com/PierreBSC/Balagan",Version="1.0.0",Title="Statistical analysis of multiplexed imaging data",
Description="Balagan is an R-package dedicated to the statistical analysis of Multiplexed Imaging (MI) datasets.
It contains several tools allowing to infer the best parameters for an optimal spatial sampling strategy,
perform statistically powerful differential abundance analysis and simulate stratified sampling using large multiplexed imaging panorama"), check_name = TRUE, roxygen = TRUE)
use_package(package = "MASS")
use_package(package = "Matrix")
use_package(package = "N2R")
use_package(package = "RColorBrewer")
use_package(package = "S4Vectors")
use_package(package = "SingleCellExperiment")
use_package(package = "aod")
use_package(package = "dbscan")
use_package(package = "doParallel")
use_package(package = "fitdistrplus")
use_package(package = "foreach")
use_package(package = "geometry")
use_package(package = "igraph")
use_package(package = "imager")
use_package(package = "pheatmap")
use_package(package = "rTensor")
use_package(package = "readr")
use_package(package = "spatgraphs")
use_package(package = "spatstat")
use_package(package = "statmod")
use_package(package = "uwot")
use_package(package = "zipfR")
library("pdflatex")
install.packages("pdflatex")
Sys.which("pdflatex")
install.packages('tinytex')
tinytex::install_tinytex()
install.packages("tinytex")
Sys.which("pdflatex")
tinytex::pdflatex()
check_installed("")
check_installed("tinytex")
library(tinytex)
check_installed("tinytex")
tinytex::install_tinytex()
N
tinytex::tinytex_root()
